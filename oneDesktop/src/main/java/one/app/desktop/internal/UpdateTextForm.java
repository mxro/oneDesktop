/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package one.app.desktop.internal;

import one.client.jre.OneJre;
import one.core.domain.OneClient;
import one.core.dsl.CoreDsl;
import one.core.dsl.callbacks.WhenLoaded;
import one.core.dsl.callbacks.WhenShutdown;
import one.core.dsl.callbacks.results.WithLoadResult;
import one.core.nodes.OneValue;

/**
 *
 * @author mroh004
 */
public class UpdateTextForm extends javax.swing.JPanel {

    /**
     * Creates new form UpdateTextForm
     */
    public UpdateTextForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nodeField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        secretField = new javax.swing.JTextField();
        loadButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        nodeTextArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        uploadChangesButton = new javax.swing.JButton();

        jLabel1.setText("Node URI:");

        jLabel2.setText("Secret:");

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        nodeTextArea.setColumns(20);
        nodeTextArea.setRows(5);
        jScrollPane1.setViewportView(nodeTextArea);

        uploadChangesButton.setText("Upload Changes");
        uploadChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadChangesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(uploadChangesButton)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(uploadChangesButton)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nodeField))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(secretField))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(loadButton)))
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(secretField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        
        final CoreDsl dsl = OneJre.init("<no api key>");
        
        final OneClient c = dsl.createClient();
        
        loadButton.setEnabled(false);
        
        dsl.load(nodeField.getText()).withSecret(secretField.getText()).in(c).and(new WhenLoaded() {
            
            @Override
            public void thenDo(WithLoadResult<Object> wlr) {
                
                Object resolved = dsl.dereference(wlr.loadedNode()).in(c);
                
                if (resolved instanceof OneValue<?>) {
                    
                    OneValue<?> oneValue = ((OneValue<Object>) resolved);
                    
                    nodeTextArea.setText(oneValue.getValue().toString());
                    
                } else {
                    
                    nodeTextArea.setText(resolved.toString());
                }
                
                dsl.shutdown(c).and(new WhenShutdown() {
                    
                    @Override
                    public void thenDo() {
                        loadButton.setEnabled(true);
                    }
                });
                
            }
        });
   
    }//GEN-LAST:event_loadButtonActionPerformed
    
    private void uploadChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadChangesButtonActionPerformed
        final CoreDsl dsl = OneJre.init("<no api key>");
        
        final OneClient c = dsl.createClient();
        
        uploadChangesButton.setEnabled(false);
        
        dsl.load(nodeField.getText()).withSecret(secretField.getText()).in(c).and(new WhenLoaded() {
            
            @Override
            public void thenDo(WithLoadResult<Object> wlr) {
                
                Object resolved = dsl.dereference(wlr.loadedNode()).in(c);
                
                if (resolved instanceof OneValue<?>) {
                    OneValue<?> oldValue = (OneValue<?>) resolved;
                    
                    OneValue<?> newValue = dsl.newNode(oldValue.getValue()).at(oldValue.getId());
                    
                    dsl.replace(wlr.loadedNode()).with(newValue).in(c);
                    
                } else {
                    dsl.replace(wlr.loadedNode()).with(nodeTextArea.getText()).in(c);
                }
                
                dsl.shutdown(c).and(new WhenShutdown() {
                    
                    @Override
                    public void thenDo() {
                        uploadChangesButton.setEnabled(true);
                    }
                });
                
            }
        });
    }//GEN-LAST:event_uploadChangesButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadButton;
    private javax.swing.JTextField nodeField;
    private javax.swing.JTextArea nodeTextArea;
    private javax.swing.JTextField secretField;
    private javax.swing.JButton uploadChangesButton;
    // End of variables declaration//GEN-END:variables
}
